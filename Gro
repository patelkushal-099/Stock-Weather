pipeline {
    agent any

    stages {
        stage('Retrieve Component Info') {
            steps {
                script {
                    def projectUrls = [
                        'https://github.com/repo1.git',
                        'https://github.com/repo2.git',
                        'https://github.com/repo3.git',
                        // Add more project URLs as needed
                    ]

                    // Define a parallel block for concurrent execution
                    parallel (
                        "ProcessProjects": {
                            // Iterate over the project URLs
                            for (def projectUrl in projectUrls) {
                                // Clone the project from the Git URL
                                dir('project') {
                                    git branch: 'master', url: projectUrl

                                    // Check if the project is a Gradle or Maven project
                                    def isGradle = fileExists('build.gradle')
                                    def isMaven = fileExists('pom.xml')

                                    if (isGradle) {
                                        // Gradle project
                                        processGradleProject()
                                    } else if (isMaven) {
                                        // Maven project
                                        processMavenProject()
                                    } else {
                                        // Unknown project type
                                        echo "Unknown project type for ${projectUrl}"
                                    }
                                }
                            }
                        }
                    )
                }
            }
        }
    }
}

def processGradleProject() {
    // Establish a connection with the Gradle project
    def connection = GradleConnector.newConnector()
        .forProjectDirectory(new File("./project"))
        .connect()

    try {
        // Access the Gradle project model
        def gradleProject = connection.getModel(GradleProject.class)

        // Extract the component information
        def componentInfo = [:]
        componentInfo.name = gradleProject.name
        componentInfo.version = gradleProject.version
        componentInfo.description = gradleProject.description

        // Convert the component information to JSON
        def json = new groovy.json.JsonBuilder(componentInfo).toPrettyString()

        // Write the JSON to a file
        def fileName = "output-${projectUrl.replaceAll('[/:]', '_')}.json"
        writeFile file: fileName, text: json

        echo "Component information saved to ${fileName}"
    } finally {
        // Disconnect from the Gradle project
        connection.close()
    }
}

def processMavenProject() {
    // Establish a connection with the Maven project
    def mavenHome = tool 'Maven'
    def mavenCmd = "${mavenHome}/bin/mvn"

    // Retrieve the component information using Maven commands
    def componentInfoCmd = "${mavenCmd} help:evaluate -Dexpression=project.name,project.version,project.description -q -DforceStdout"
    def componentInfoOutput = sh(returnStdout: true, script: componentInfoCmd).trim()

    // Split the component information output
    def componentInfoParts = componentInfoOutput.split('\n')
    def projectName = componentInfoParts[0]
    def projectVersion = componentInfoParts[1]
    def projectDescription = componentInfoParts[2]

    // Extract the component information
    def componentInfo = [:]
    componentInfo.name = projectName
    componentInfo.version = projectVersion
    componentInfo.description = projectDescription

    // Convert the component information to JSON
    def json = new groovy.json.JsonBuilder(componentInfo).toPrettyString()

    // Write the JSON to a file
    def fileName = "output-${projectUrl.replaceAll('[/:]', '_')}.json"
    writeFile file: fileName, text:
