import subprocess
import json
import time
import pandas as pd
from concurrent.futures import ThreadPoolExecutor, as_completed
import os

# Function to send curl request
def send_request(payload):
    curl_command = [
        'curl',
        '-X', 'POST',
        'https://your.api.endpoint',  # Replace with your API endpoint
        '-H', 'Content-Type: application/json',
        '-d', json.dumps(payload)
    ]
    start_time = time.time()
    result = subprocess.run(curl_command, capture_output=True, text=True)
    end_time = time.time()

    return {
        'payload': payload,
        'response': result.stdout,
        'response_time': end_time - start_time
    }

# Read payloads from file
def read_payloads(file_path):
    with open(file_path, 'r') as file:
        payloads = file.readlines()
    return [json.loads(payload.strip()) for payload in payloads]

# Write results to Excel file using pandas
def write_to_excel(results, output_dir):
    parameter_results = {}

    # Organize results by parameter
    for result in results:
        for key in result['payload']:
            if key not in parameter_results:
                parameter_results[key] = []
            parameter_results[key].append({
                'payload': result['payload'],
                'response': result['response'],
                'response_time': result['response_time']
            })

    # Write each parameter's results to a separate Excel file
    for parameter, res_list in parameter_results.items():
        data = []
        for res in res_list:
            data.append([
                json.dumps(res['payload']),
                len(json.dumps(res['payload'])),
                len(res['response']),
                res['response_time'],
                res['response']
            ])

        df = pd.DataFrame(data, columns=["Payload", "Request Length", "Response Length", "Response Time (s)", "Response Payload"])
        output_file = os.path.join(output_dir, f"{parameter}_results.xlsx")
        df.to_excel(output_file, index=False)

# Function to dynamically create payloads for each key in the JSON
def create_payloads(json_obj, base_path=""):
    payloads = []
    for key, value in json_obj.items():
        new_base_path = f"{base_path}.{key}" if base_path else key
        if isinstance(value, dict):
            payloads.extend(create_payloads(value, new_base_path))
        else:
            payload = {new_base_path: value}
            payloads.append(payload)
    return payloads

def main():
    # Example JSON structure
    json_data = {
        "quiz": {
            "sport": {
                "q1": {
                    "question": "Which one is correct team name in NBA?",
                    "options": [
                        "New York Bulls",
                        "Los Angeles Kings",
                        "Golden State Warriros",
                        "Huston Rocket"
                    ],
                    "answer": "Huston Rocket"
                }
            },
            "maths": {
                "q1": {
                    "question": "5 + 7 = ?",
                    "options": [
                        "10",
                        "11",
                        "12",
                        "13"
                    ],
                    "answer": "12"
                },
                "q2": {
                    "question": "12 - 8 = ?",
                    "options": [
                        "1",
                        "2",
                        "3",
                        "4"
                    ],
                    "answer": "4"
                }
            }
        }
    }

    payloads = create_payloads(json_data)
    results = []
    max_workers = 10  # Number of concurrent threads

    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        future_to_payload = {executor.submit(send_request, payload): payload for payload in payloads}
        for future in as_completed(future_to_payload):
            result = future.result()
            results.append(result)

    output_dir = 'results'  # Directory to save output files
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    write_to_excel(results, output_dir)

if __name__ == "__main__":
    main()
